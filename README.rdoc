= Log4r Remote Syslog Outputter

== About

This is the fork and update of the repo: https://github.com/ohwillie/log4r_remote_syslog_outputter, which allows Log4r to output to a remote syslog server.
Papertrail has a gem: https://github.com/papertrail/remote_syslog_logger, which defines a class RemoteSyslogLogger::UdpSender which can act as a LogDevice class,
implementing the methods: write, and close.  This allows you do instantiate a Ruby Logger class using this LogDevice duck-type.  This gem uses the
RemoteSyslogLogger::UdpSender to make a functioning outputter for Log4r, which can be added to outputters of a Log4r::Logger instance.  The class name of this outputter
is Log4r::RemoteSyslogOutputter.  I have altered the gem to enable XML and YAML configurators to instantiate this new type of outputter.

== Getting Started

1. Add this line to your Gemfile

    gem 'log4r_remote_syslog_outputter', :git => "git@github.com:nlim/log4r_remote_syslog_outputter.git"

2. Bundle

    bundle install
  
=== Instantiating Outputters

1. In your code you can create an outputter by writing:

    Log4r::RemoteSyslogOutputter.new("foo", :url => "syslog://logs.papertrailapp.com:#{port}", :program => "bar")

2.  "foo" is whatever you want to name your outputter, and you can add outputters by name to Log4r::Logger instances.  Even though
    :url is an option here, it is required.  This (not so great) design choice is a neccessity to be able to create the outputter
    via configuration file, without having to change the Log4r code.

3.  Other options here, that get passed to RemoteSyslogLogger::UdpSender, are:  :whinyerrors, :local_hostname, :facility, :severity, :program.
    See:  https://github.com/papertrail/remote_syslog_logger/blob/master/lib/remote_syslog_logger/udp_sender.rb for how these options are used.
    (Lookout: The key for :program can't have any spaces)

=== Using Configuration Files

==== YAML

1. With the following example file, you can call Log4r::YamlConfigurator.decode_yaml(YAML.load_file('config.yml')), and you get all of your defined
   Loggers and Outputters created.

    logger_defaults: &logger_defaults
      level: ALL
      trace: true
      additive: false
      outputters:
      - papertrail

    loggers:
    - name: logger_one
      <<: *logger_defaults
    - name: logger_two
        <<: *logger_defaults

    outputters:
    - type: RemoteSyslogOutputter
      name: papertrail
      level: ALL
      url: syslog://logs.papertrailapp.com:{PORT}
      program: My_Awesome_Program
      formatter:
        pattern     : '%c %l: %m'
        type        : PatternFormatter

==== XML

1. With the following example file, you can call Log4r::Configurator.load_xml_file('config.xml'), and create all
   of your defined loggers and outputters. (Look out: all definitions must be within the log4r_config document element)

    <log4r_config>
      <!-- Outputters -->
      <outputter name="remote_syslog_outputter" type="RemoteSyslogOutputter" level="ALL" url="http://localhost:3203" program="my_program">
        <formatter type="Log4r::PatternFormatter">
          <pattern>=>[%5l %d] %C: %M [%t]</pattern>
        </formatter>
      </outputter>
      <!-- Loggers -->
      <logger name="my_awesome_logger" level="ALL" additive="false" trace="true">
        <outputter>remote_syslog_outputter</outputter>
      </logger>
    </log4r_config>

== Contribute

=== Cloning

1. If you have a fix, fork the this repo on Github, then on your machine run

    git clone -b your-fix-branch-name git@github.com:{YOUR_USER_NAME}/log4r_remote_syslog_outputter.git

2. Make your changes, and make sure tests pass, from the repo root directory

    rake spec

3. When they pass, commit them then push to your Github repo
   
    git push origin your-fix-branch-name

4. Submit a pull request on Github
        


  